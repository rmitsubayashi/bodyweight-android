// https://www.veskoiliev.com/how-to-setup-jacoco-for-android-project-with-java-kotlin-and-multiple-flavours/
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.4"
}

// needed for Robolectric
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

tasks.create(name: "reportUnitTestCoverage", type: JacocoReport,
        dependsOn: ["testDebugUnitTest"]) {
    group = "verification"
    description = "Generate Jacoco coverage reports."

    def reportFolderPath = "$buildDir/reports/coverage"
    reports {
        //for viewing
        html {
            enabled true
            destination file("${reportFolderPath}")
        }
        //for parsing programmatically
        xml {
            enabled true
            destination file("${reportFolderPath}/coverageReport.xml")
        }

    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*com.github.rmitsubayashi.bodyweight.Test*.*',
            'android/**/*.*'
            //might also need to exclude Kotlin-generated code
            // https://medium.com/@andrey.fomenkov/kotlin-jacoco-tuning-compiler-to-skip-generated-code-935fcaeaa391
    ]
    def compiledKotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: excludes)
    classDirectories = files([compiledKotlinClasses])

    sourceDirectories = files([
            "$project.projectDir/src/main/kotlin"
    ])

    executionData = files("${project.buildDir}/jacoco/testDebugUnitTest.exec")

    // unit test reports are suppressed, but the directories are still there
    doLast {
        delete "$project.buildDir/reports/tests"
    }
    doLast {
        delete "$project.buildDir/test-results"
    }
}

// since we reorganized the outputs of the JacocoReport task,
// instead of using the provided JacocoCoverageVerification task,
// use a custom task so we can find the output files
task verifyUnitTestCoverage(dependsOn: ['reportUnitTestCoverage'])  {
    group = "verification"
    def MINIMUM_COVERAGE = 0.6
    doLast {
        // dtd doctypes don't work well with XML parsers
        ant.replace(file: "$buildDir/reports/coverage/coverageReport.xml",
                token: '<!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd">', value: '')
        def report = new XmlSlurper().parse("$buildDir/reports/coverage/coverageReport.xml")
        def missedInstructions = report.counter[0]['@missed'].toDouble()
        def coveredInstructions = report.counter[0]['@covered'].toDouble()
        def totalInstructions = missedInstructions + coveredInstructions
        if (totalInstructions == 0.0){
            return
        }
        def instructionCoverage = coveredInstructions / totalInstructions
        if (instructionCoverage < MINIMUM_COVERAGE){
            throw new GradleException("Unit test coverage does not meet minimum requirements: Required: $MINIMUM_COVERAGE  Got: $instructionCoverage\n" +
                    "Please check $buildDir/jacoco/unit-test-reports/coverage for details")
        }

    }

}
